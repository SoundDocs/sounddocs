name: CI

on:
  pull_request:
    branches: [main, beta]
  push:
    branches: [main, beta]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history so base commit exists for diffing

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pnpm install
          pip install ruff sqlfluff

      - name: Get changed files
        id: get-files
        run: |
          echo "🔍 Detecting changed files..."

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            DIFF_RANGE="$BASE_SHA...$HEAD_SHA"  # PRs: compare from branch point
            echo "📋 PR detected - comparing: $DIFF_RANGE"
          else
            DIFF_RANGE="HEAD~1..HEAD"           # pushes: last commit vs previous
            echo "📋 Push detected - comparing: $DIFF_RANGE"
          fi

          # Ensure we have the SHAs locally (defensive)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch --no-tags --prune --depth=50 origin $BASE_SHA $HEAD_SHA || true
          fi

          # Get changed files by type using proper git pathspecs
          TS_FILES=$(git diff --name-only "$DIFF_RANGE" -- ':(glob)**/*.ts' ':(glob)**/*.tsx' | tr '\n' ' ' || true)
          JS_FILES=$(git diff --name-only "$DIFF_RANGE" -- ':(glob)**/*.js' ':(glob)**/*.jsx' | tr '\n' ' ' || true)
          PY_FILES=$(git diff --name-only "$DIFF_RANGE" -- ':(glob)**/*.py' | tr '\n' ' ' || true)
          SQL_FILES=$(git diff --name-only "$DIFF_RANGE" -- ':(glob)**/*.sql' | tr '\n' ' ' || true)

          # Debug output
          echo "📝 TypeScript files: ${TS_FILES:-none}"
          echo "📝 JavaScript files: ${JS_FILES:-none}"
          echo "📝 Python files: ${PY_FILES:-none}"
          echo "📝 SQL files: ${SQL_FILES:-none}"

          # Export for use in other steps
          echo "ts_files=$TS_FILES" >> $GITHUB_OUTPUT
          echo "js_files=$JS_FILES" >> $GITHUB_OUTPUT
          echo "py_files=$PY_FILES" >> $GITHUB_OUTPUT
          echo "sql_files=$SQL_FILES" >> $GITHUB_OUTPUT

          # Set flags for conditional steps
          [ -n "$TS_FILES" ] && echo "has_ts=true" >> $GITHUB_OUTPUT || echo "has_ts=false" >> $GITHUB_OUTPUT
          [ -n "$JS_FILES" ] && echo "has_js=true" >> $GITHUB_OUTPUT || echo "has_js=false" >> $GITHUB_OUTPUT
          [ -n "$PY_FILES" ] && echo "has_py=true" >> $GITHUB_OUTPUT || echo "has_py=false" >> $GITHUB_OUTPUT
          [ -n "$SQL_FILES" ] && echo "has_sql=true" >> $GITHUB_OUTPUT || echo "has_sql=false" >> $GITHUB_OUTPUT

      - name: Run ESLint on changed files
        if: always()  # Always run to ensure linting happens
        run: |
          if [ "${{ steps.get-files.outputs.has_ts }}" = "true" ] || [ "${{ steps.get-files.outputs.has_js }}" = "true" ]; then
            echo "🧹 Running ESLint on changed files..."
            echo "📝 Changed TS/TSX files: ${{ steps.get-files.outputs.ts_files }}"
            echo "📝 Changed JS/JSX files: ${{ steps.get-files.outputs.js_files }}"

            # Create a combined list of changed TS/JS files
            CHANGED_FILES="${{ steps.get-files.outputs.ts_files }} ${{ steps.get-files.outputs.js_files }}"
            echo "$CHANGED_FILES" | tr ' ' '\n' | xargs npx eslint --max-warnings 0
          else
            echo "⚠️  No specific TS/JS files detected or diff failed — running full ESLint on web app..."
            npx eslint --max-warnings 0 --ext .ts,.tsx,.js,.jsx apps/web/src
          fi

      - name: Run TypeScript check on changed files
        if: always()  # Always run to ensure type checking happens
        run: |
          cd apps/web
          if [ "${{ steps.get-files.outputs.has_ts }}" = "true" ] && [ -n "${{ steps.get-files.outputs.ts_files }}" ]; then
            echo "🔧 Running TypeScript check on changed files..."
            echo "📝 Changed TypeScript files: ${{ steps.get-files.outputs.ts_files }}"

            echo "${{ steps.get-files.outputs.ts_files }}" | tr ' ' '\n' | xargs ../../../node_modules/.bin/tsc --noEmit --project tsconfig.app.json
          else
            echo "⚠️  No specific TS files detected or diff failed — running full TypeScript check..."
            ../../../node_modules/.bin/tsc --noEmit --project tsconfig.app.json
          fi

      - name: Run Python linting on changed files
        if: always()  # Always run to ensure Python linting happens
        run: |
          if [ "${{ steps.get-files.outputs.has_py }}" = "true" ] && [ -n "${{ steps.get-files.outputs.py_files }}" ]; then
            echo "🐍 Running Python linting on changed files..."
            echo "📝 Changed Python files: ${{ steps.get-files.outputs.py_files }}"

            echo "${{ steps.get-files.outputs.py_files }}" | tr ' ' '\n' | xargs ruff check --max-warnings=0
          else
            echo "⚠️  No Python files detected or diff failed — running full Python linting..."
            ruff check agents/ --max-warnings=0 || true  # Allow failures for legacy code
          fi

      - name: Run SQL linting on changed files
        if: always()  # Always run to ensure SQL linting happens
        run: |
          if [ "${{ steps.get-files.outputs.has_sql }}" = "true" ] && [ -n "${{ steps.get-files.outputs.sql_files }}" ]; then
            echo "🗄️ Running SQL linting on changed files..."
            echo "📝 Changed SQL files: ${{ steps.get-files.outputs.sql_files }}"

            echo "${{ steps.get-files.outputs.sql_files }}" | tr ' ' '\n' | xargs sqlfluff fix --dialect postgres
          else
            echo "⚠️  No SQL files detected or diff failed — running full SQL linting..."
            sqlfluff lint supabase/migrations/ --dialect postgres || true  # Allow failures for legacy code
          fi

      - name: Code quality summary
        if: always()
        run: |
          echo "🎯 Code Quality Check Summary:"
          echo "📊 TypeScript files processed: ${{ steps.get-files.outputs.has_ts == 'true' && 'Yes' || 'No' }}"
          echo "🧹 JavaScript files processed: ${{ steps.get-files.outputs.has_js == 'true' && 'Yes' || 'No' }}"
          echo "🐍 Python files processed: ${{ steps.get-files.outputs.has_py == 'true' && 'Yes' || 'No' }}"
          echo "🗄️ SQL files processed: ${{ steps.get-files.outputs.has_sql == 'true' && 'Yes' || 'No' }}"
          echo ""
          echo "📝 Files processed:"
          echo "  TS/TSX: ${{ steps.get-files.outputs.ts_files }}"
          echo "  JS/JSX: ${{ steps.get-files.outputs.js_files }}"
          echo "  Python: ${{ steps.get-files.outputs.py_files }}"
          echo "  SQL: ${{ steps.get-files.outputs.sql_files }}"
          echo ""
          echo "✅ All code quality checks completed successfully!"

      - name: Run build
        run: pnpm build
