name: Build Installers

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd agents/capture-agent-py
          pip install --upgrade pip
          pip install pyinstaller
          pip install .

      - name: Build executable
        run: |
          cd agents/capture-agent-py
          pyinstaller --onefile --name sounddocs-capture-agent --add-data "capture_agent:capture_agent" --add-data "generate_cert.py:." main.py

      - name: Install dependencies
        run: |
          brew install mkcert
          brew install librsvg

      - name: Create installer package
        run: |
          cd agents/capture-agent-py
          mkdir -p pkg-root/Applications/SoundDocs
          cp dist/sounddocs-capture-agent pkg-root/Applications/SoundDocs/

                    # Create launch script
          cat > pkg-root/Applications/SoundDocs/launch-agent.sh << 'EOF'
          #!/bin/bash

          # Set up PATH for GUI launches (includes Homebrew paths)
          export PATH="/usr/local/bin:/opt/homebrew/bin:$PATH"

          # Function to show notifications on macOS
          notify() {
            if command -v osascript >/dev/null 2>&1; then
              osascript -e "display notification \"$1\" with title \"SoundDocs Capture Agent\""
            fi
            echo "$1"
          }

          # Function to show error dialog and exit
          error_exit() {
            if command -v osascript >/dev/null 2>&1; then
              osascript -e "display dialog \"$1\" with title \"SoundDocs Capture Agent Error\" buttons {\"OK\"} default button \"OK\" with icon stop"
            else
              echo "Error: $1" >&2
            fi
            exit 1
          }

          cd "$HOME/.sounddocs-agent" || mkdir -p "$HOME/.sounddocs-agent" && cd "$HOME/.sounddocs-agent"

          notify "Setting up SoundDocs Capture Agent dependencies..."

          # Check if mkcert is installed, install if missing
          if ! command -v mkcert >/dev/null 2>&1; then
            notify "Installing mkcert..."
            if command -v brew >/dev/null 2>&1; then
              brew install mkcert || error_exit "Failed to install mkcert via Homebrew"
            else
              error_exit "Homebrew is required to install mkcert. Please install Homebrew first: https://brew.sh"
            fi
          fi

          # Check if mkcert CA is installed
          if ! mkcert -CAROOT >/dev/null 2>&1 || [ ! -f "$(mkcert -CAROOT)/rootCA.pem" ]; then
            notify "Setting up mkcert Certificate Authority (may prompt for password)..."
            mkcert -install || error_exit "Failed to install mkcert Certificate Authority"
          fi

          # Generate certs if needed
          if [ ! -f localhost.pem ]; then
            notify "Generating SSL certificates..."
            mkcert -cert-file localhost.pem -key-file localhost-key.pem localhost 127.0.0.1 ::1 || error_exit "Failed to generate SSL certificates"
          fi

          notify "Starting SoundDocs Capture Agent..."
          exec /Applications/SoundDocs/sounddocs-capture-agent
          EOF
          chmod +x pkg-root/Applications/SoundDocs/launch-agent.sh
          chmod +x pkg-root/Applications/SoundDocs/sounddocs-capture-agent

          # Create macOS app bundle structure
          mkdir -p "pkg-root/Applications/SoundDocs Capture Agent.app/Contents/MacOS"
          mkdir -p "pkg-root/Applications/SoundDocs Capture Agent.app/Contents/Resources"

          # Convert SVG logo to .icns (macOS icon format)
          rsvg-convert -w 1024 -h 1024 -f png ../../SoundDocs-logo.svg > logo-1024.png
          mkdir -p icon.iconset
          # Create different sizes for iconset
          sips -z 16 16 logo-1024.png --out icon.iconset/icon_16x16.png
          sips -z 32 32 logo-1024.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32 logo-1024.png --out icon.iconset/icon_32x32.png
          sips -z 64 64 logo-1024.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128 logo-1024.png --out icon.iconset/icon_128x128.png
          sips -z 256 256 logo-1024.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256 logo-1024.png --out icon.iconset/icon_256x256.png
          sips -z 512 512 logo-1024.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512 logo-1024.png --out icon.iconset/icon_512x512.png
          sips -z 1024 1024 logo-1024.png --out icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset
          cp icon.icns "pkg-root/Applications/SoundDocs Capture Agent.app/Contents/Resources/"

          # Create Info.plist for the app bundle
          cat > "pkg-root/Applications/SoundDocs Capture Agent.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>SoundDocs Capture Agent</string>
              <key>CFBundleIdentifier</key>
              <string>org.sounddocs.capture-agent</string>
              <key>CFBundleName</key>
              <string>SoundDocs Capture Agent</string>
              <key>CFBundleDisplayName</key>
              <string>SoundDocs Capture Agent</string>
              <key>CFBundleVersion</key>
              <string>0.1.3</string>
              <key>CFBundleShortVersionString</key>
              <string>0.1.3</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleIconFile</key>
              <string>icon</string>
              <key>LSUIElement</key>
              <false/>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

          # Copy launch script to app bundle as the main executable
          cp pkg-root/Applications/SoundDocs/launch-agent.sh "pkg-root/Applications/SoundDocs Capture Agent.app/Contents/MacOS/SoundDocs Capture Agent"
          chmod +x "pkg-root/Applications/SoundDocs Capture Agent.app/Contents/MacOS/SoundDocs Capture Agent"

          # Build package
          pkgbuild --root pkg-root --identifier org.sounddocs.capture-agent --version 0.1.3 --install-location / SoundDocsAgent-macOS.pkg

      - name: Upload macOS installer
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: agents/capture-agent-py/SoundDocsAgent-macOS.pkg

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd agents/capture-agent-py
          pip install --upgrade pip
          pip install pyinstaller
          pip install .

      - name: Build executable
        run: |
          cd agents/capture-agent-py
          pyinstaller --onefile --name sounddocs-capture-agent --add-data "capture_agent:capture_agent" --add-data "generate_cert.py:." main.py

      - name: Install NSIS
        run: choco install nsis -y

      - name: Create NSIS installer script
        run: |
          cd agents/capture-agent-py
          cat > installer.nsi << 'EOF'
          !define APPNAME "SoundDocs Capture Agent"
          !define APPVERSION "0.1.3"
          Name "${APPNAME}"
          OutFile "SoundDocsAgent-Windows.exe"
          InstallDir "$PROGRAMFILES\SoundDocs"
          RequestExecutionLevel admin

          Page directory
          Page instfiles

          Section "Install"
              SetOutPath $INSTDIR
              File "dist\sounddocs-capture-agent.exe"
              
              ; Create agent directory
              CreateDirectory "$PROFILE\.sounddocs-agent"
              
              ; Create setup helper script
              FileOpen $0 "$INSTDIR\setup-dependencies.bat" w
              FileWrite $0 "@echo off$\r$\n"
              FileWrite $0 "echo Setting up SoundDocs Capture Agent dependencies...$\r$\n"
              FileWrite $0 "echo Checking for mkcert...$\r$\n"
              FileWrite $0 "where mkcert >nul 2>&1$\r$\n"
              FileWrite $0 "if %errorlevel% neq 0 ($\r$\n"
              FileWrite $0 "  echo Installing mkcert via Chocolatey...$\r$\n"
              FileWrite $0 "  where choco >nul 2>&1$\r$\n"
              FileWrite $0 "  if %errorlevel% neq 0 ($\r$\n"
              FileWrite $0 "    echo Please install Chocolatey first: https://chocolatey.org/install$\r$\n"
              FileWrite $0 "    pause$\r$\n"
              FileWrite $0 "    exit /b 1$\r$\n"
              FileWrite $0 "  )$\r$\n"
              FileWrite $0 "  choco install mkcert -y$\r$\n"
              FileWrite $0 ")$\r$\n"
              FileWrite $0 "echo Setting up mkcert certificate authority...$\r$\n"
              FileWrite $0 "mkcert -install$\r$\n"
              FileWrite $0 "echo Generating SSL certificates...$\r$\n"
              FileWrite $0 "cd /d %USERPROFILE%\.sounddocs-agent$\r$\n"
              FileWrite $0 "mkcert -cert-file localhost.pem -key-file localhost-key.pem localhost 127.0.0.1 ::1$\r$\n"
              FileWrite $0 "echo Setup complete!$\r$\n"
              FileWrite $0 "pause$\r$\n"
              FileClose $0
              
              ; Create launch script
              FileOpen $1 "$INSTDIR\launch-agent.bat" w
              FileWrite $1 "@echo off$\r$\n"
              FileWrite $1 "cd /d %USERPROFILE%\.sounddocs-agent$\r$\n"
              FileWrite $1 "if not exist localhost.pem ($\r$\n"
              FileWrite $1 "  echo SSL certificates not found. Running setup...$\r$\n"
              FileWrite $1 "  call $\"$INSTDIR\setup-dependencies.bat$\"$\r$\n"
              FileWrite $1 ")$\r$\n"
              FileWrite $1 "$\"$INSTDIR\sounddocs-capture-agent.exe$\"$\r$\n"
              FileClose $1
              
              ; Create shortcuts
              CreateDirectory "$SMPROGRAMS\SoundDocs"
              CreateShortcut "$SMPROGRAMS\SoundDocs\SoundDocs Capture Agent.lnk" "$INSTDIR\launch-agent.bat" "" "$INSTDIR\sounddocs-capture-agent.exe" 0
              CreateShortcut "$SMPROGRAMS\SoundDocs\Setup Dependencies.lnk" "$INSTDIR\setup-dependencies.bat"
              CreateShortcut "$DESKTOP\SoundDocs Capture Agent.lnk" "$INSTDIR\launch-agent.bat" "" "$INSTDIR\sounddocs-capture-agent.exe" 0
          SectionEnd
          EOF
        shell: bash

      - name: Build NSIS installer
        run: |
          cd agents/capture-agent-py
          makensis installer.nsi

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: agents/capture-agent-py/SoundDocsAgent-Windows.exe

  upload-to-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Contents of macos-installer (if exists):"
          ls -la macos-installer/ || echo "macos-installer directory not found"
          echo "Contents of windows-installer (if exists):"
          ls -la windows-installer/ || echo "windows-installer directory not found"

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            SoundDocsAgent-macOS.pkg
            SoundDocsAgent-Windows.exe
          fail_on_unmatched_files: true
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
